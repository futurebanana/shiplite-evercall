---
- hosts: services
  gather_facts: false
  # strategy: free
  serial: 10

  # Include secrets
  pre_tasks:
    - name: "Include vars of secrets 'secrets' variable."
      ansible.builtin.include_vars:
        file: ../hosts/{{ environment_name }}/secrets/{{ ansible_host }}.vault.yml
        name: secrets

    # Fail if secrets is not defined
    - name: Fail if secrets is not defined
      ansible.builtin.fail:
        msg: "The 'secrets' variable is not defined. Please ensure that the secrets file exists and is properly encrypted."
      when: secrets is not defined

    - debug:
        msg:
          - "{{ labels | traefik2dns | default([]) }}"
          - "{{ hostvars[target_host].ansible_host }}"
          - "{{ hostvars[target_host].inventory_hostname }}"

  tasks:

    - name: Deploy docker services via systemd
      ansible.builtin.include_role:
        name: docker_systemd_service
        apply:
          delegate_to: "{{ target_host }}"
          become: true
      loop: "{{ service__replicas }}"
      loop_control:
        loop_var: service
        index_var: idx
      vars:
        docker_systemd_service__name: "{{ service.service__name }}"
        docker_systemd_service__image: "{{ service.service__image }}"
        docker_systemd_service__state: started
        docker_systemd_service__network_mode: "{{ service.service__network_mode | default('bridge') }}"
        docker_systemd_service__ports: "{{ service.service__ports | default([]) }}"
        docker_systemd_service__env: "{{ service.service__env | default({}) }}"
        docker_systemd_service__volumes: "{{ service.service__volumes | default([]) }}"
        docker_systemd_service__labels: "{{ service.service__labels | default({}) }}"
        docker_systemd_service__backup: "{{ service.service__backup | default(false) }}"
        docker_systemd_service__cmd: "{{ service.service__cmd | default([]) }}"

  roles:

    # Create A record for hosts in 'ingress' group
    - role: dns_records
      vars:
        dns_records__name:
          - "{{ hostvars[target_host].inventory_hostname }}"
        dns_records__value: "{{ hostvars[target_host].ansible_host }}"
      when:
        - target_host in groups['ingress']

    - role: dns_records
      vars:
        dns_records__name: "{{ labels | traefik2dns | default([]) }}"
        dns_records__value: "{{ hostvars[target_host].ansible_host }}"
      when:
        - target_host not in groups['ingress']
        - (service.service__labels | traefik2dns | default([])) | length > 0
